package org.renci.pharos.lp;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;

import org.apache.commons.lang.ArrayUtils;

import net.sf.javailp.Linear;
import net.sf.javailp.OptType;
import net.sf.javailp.Problem;
import net.sf.javailp.Result;
import net.sf.javailp.Solver;

import com.sun.tools.javac.util.Pair;
import com.tinkerpop.blueprints.Graph;
import com.tinkerpop.blueprints.Vertex;
import com.tinkerpop.blueprints.impls.tg.TinkerGraph;
import com.tinkerpop.blueprints.util.io.graphml.GraphMLReader;
import static com.google.common.base.Preconditions.checkNotNull;

enum OBJ {MIN,MAX};
interface PProblem {
	public Problem problem();
	public void setObjective(Linear l, OBJ obj);
	public Result solve(Solver solver);
	public Matrix demandMatrix();
	public Variables variables();
	public Graph getRequestTopo();
	public Graph getProviderTopo();
}

public class LpProblem implements PProblem {
	protected Problem problem=new Problem();
	protected NodeAdjacencyMatrix demandMatrix;
	protected Variables variables;
	protected Graph pgraph;
	protected Graph rgraph;
		
	public LpProblem () throws FileNotFoundException, IOException{		
		//read graphml file to TinkerGraph
		String pFile=FileGUI.getFile("Open Provider Topology");
		if(pFile!=null){
			pgraph=new TinkerGraph();
			GraphMLReader.inputGraph(pgraph, new FileInputStream(pFile));
		}
		String rFile=FileGUI.getFile("Open Request Topology");
		if(rFile!=null){
			rgraph=new TinkerGraph();
			GraphMLReader.inputGraph(rgraph, new FileInputStream(rFile));
		}
		demandMatrix=new NodeAdjacencyMatrix(rgraph);
		variables=new FlowAssignmentVariables8D(pgraph,rgraph);
	}
	public Iterator<Entry<Pair<Integer, Integer>, EdgeDisc>> getIterator(){
		return demandMatrix.getIterator();
	}
	public void setObjective(Linear l, OBJ obj){
		if (obj==OBJ.MIN){
			problem.setObjective(l, OptType.MIN);
			System.out.println("Min: "+l);
		}
		else if (obj==OBJ.MAX){
			problem.setObjective(l, OptType.MAX);
			System.out.println("Max: "+l);
		}
		
	}
	public Result solve(Solver solver) {
		return solver.solve(problem);
	}
	public Problem problem() {
		return problem;
	}
	
	public Matrix demandMatrix() {
		return demandMatrix;
	}
	public Variables variables() {
		return variables;
	}
	public Graph getRequestTopo() {
		return rgraph;
	}
	public Graph getProviderTopo() {
		return pgraph;
	}
}
abstract class ProblemDecorator implements PProblem{
	PProblem pproblem;
	public Problem problem() {
		return pproblem.problem();
	}
	
	public void setObjective(Linear l, OBJ obj) {
		pproblem.setObjective(l, obj);
	}

	public Result solve(Solver solver) {
		return pproblem.solve(solver);
	}
	
	public Matrix demandMatrix() {
		return pproblem.demandMatrix();
	}
	public Graph getRequestTopo() {
		return pproblem.getRequestTopo();
	}
	public Graph getProviderTopo() {
		return pproblem.getProviderTopo();
	}
}

class ILP extends ProblemDecorator{
	public ILP(PProblem p) {
		pproblem=checkNotNull(p);
		System.out.println("adding integer constraints to the problem:");
		addIntegerConstraints();
	}
	
	public void addIntegerConstraints(){
		//integer constraints
		for(String s: variables().getAllVariables()){
			pproblem.problem().setVarType(s,Boolean.class);
		}
		
	}

	public Variables variables() {
		return pproblem.variables();
	}

	
	
}
class SSSDFlowProblem extends ProblemDecorator{
	private String sourceid=null;
	private String destid=null;
	
	public void addFlowConservationConstraints(){
		System.out.println("adding flow constraints:");
		Graph pgraph=getProviderTopo();
		Iterable<Vertex> it=pgraph.getVertices();
		
		  for (Vertex v: it){
			  String id=(String)v.getProperty("ID");
			  boolean labeltranslation=false;
			  if(((String)v.getProperty("LabelTranslation")).equals("yes"))
				  labeltranslation=true;
			  else labeltranslation=false;
			  FlowAssignmentVariables8D fav=(FlowAssignmentVariables8D)variables();
			  if(id.equals(sourceid)){
				  String[] s=new String[]{sourceid,destid,"*","*",id,"+","+","+"};
				  ArrayList<Linear> arr= 
						  fav.generateLinears(s, fav.getSub());
				  for(Linear l:arr){
					  problem().add(l, "=", 0);
					  System.out.println(l+" = 0");
				  }
			  }
			  else if(id.equals(destid)){
				  String[] s=new String[]{sourceid,destid,"*","*","+",id,"+","+"};
				  ArrayList<Linear> arr= 
						  fav.generateLinears(s, fav.getSub());
				  for(Linear l:arr){
					  problem().add(l, "=", 0);
					  System.out.println(l+" = 0");
				  }
			  }
			  else{
				  Iterator<String> itt=fav.getRequest().iterator(sourceid, destid, "*", "*");
				  while(itt.hasNext()){
					  String req=itt.next();
					  String delim="[_]";
					  String[] array=req.split(delim);
					  if(labeltranslation){
						  //if the node can translate label, \sum_in=\sum_out
						  String[] prv={id,"+","+","+"};
						  String[] both1=(String[]) ArrayUtils.addAll(array, prv);
						  Linear l1=fav.getSum().operate(both1);
						  
						  String[] prv2={"+",id,"+","+"};
						  String[] both2=(String[]) ArrayUtils.addAll(array, prv2);
						  Linear l2=fav.getSum().operate(both2);
						  Linear ll=new Linear();
						  List<Object> va=l1.getVariables();
						  for(Object obj:va){
							  ll.add(1,obj);
						  }
						  va=l2.getVariables();
						  for(Object obj:va){
							  ll.add(-1,obj);
						  }
						  problem().add(ll, "=", 0);
						  System.out.println(ll+" = 0");
					  }
					  else {
						//if the node can NOT translate label, \sum_in=\sum_out for every label
						  Iterator<String> it1=fav.getProvider().iterator(id,"*","*","*");
						  Iterator<String> it2=fav.filteredIterator(it1, new NthDimIterator(2));
						  while(it2.hasNext()){
							  String it2next=it2.next();
							  String label=fav.getProvider().getNthDim(it2next, 2);
							  String[] prv={id,"+",label,"+"};
							  String[] both1=(String[]) ArrayUtils.addAll(array, prv);
							  Linear l1=fav.getSum().operate(both1);
							  String[] prv2={"+",id,"+",label};
							  String[] both2=(String[]) ArrayUtils.addAll(array, prv2);
							  Linear l2=fav.getSum().operate(both2);
							  Linear ll=new Linear();
							  List<Object> va=l1.getVariables();
							  for(Object obj:va){
								  ll.add(1,obj);
							  }
							  va=l2.getVariables();
							  for(Object obj:va){
								  ll.add(-1,obj);
							  }
							  problem().add(ll, "=", 0);
							  System.out.println(ll+" = 0");
						  }					  
					  }
				  }
			  }
		  }
	}
	public void addRequestConstraints(){
		System.out.println("adding request constraints:");
		FlowAssignmentVariables8D fav=(FlowAssignmentVariables8D)variables();
		FlowVariables4D fv=fav.getRequest();
		if(sourceid!=null && destid!=null){
			String[] s=new String[]{sourceid,destid,"+","+"};
			Linear l=fv.getSum().operate(s);
			problem().add(l, "=", fav.demand(sourceid, destid));
			System.out.println(l+" = "+ fav.demand(sourceid, destid));
		}
	}
	public void addLabelConstraints(){
		System.out.println("adding label assignment constraints:");
		FlowAssignmentVariables8D fav=(FlowAssignmentVariables8D)variables();
		FlowVariables4D fv=fav.getRequest();
		String[] s=new String[]{sourceid,destid,"*","+"};
		ArrayList<Linear> arr=fv.generateLinears(s, fv.getSum());
		for(Linear l:arr){
			problem().add(l, "<=", 1);
			System.out.println(l+" <= "+ 1);
		}
	}
	public void addCapacityConstraints(){
		System.out.println("adding capacity constraints:");
		FlowAssignmentVariables8D fav=(FlowAssignmentVariables8D)variables();
		String[] s=new String[]{sourceid,destid,"+","+","*","*","*","*"};
		ArrayList<Linear> arr=fav.generateLinears(s, fav.getSum());
		for(Linear l:arr){
			problem().add(l, "<=", 1);
			System.out.println(l+" <= "+ 1);
		}
	}
	public SSSDFlowProblem(PProblem p) {
		checkNotNull(p);
		pproblem=p;
	}
	public SSSDFlowProblem(PProblem p, String sid,String did) {
		pproblem=checkNotNull(p);
		sourceid=checkNotNull(sid);
		destid=checkNotNull(did);
	}
	public void setSource(String ID) {
		sourceid=ID;		
	}
	public void setDestination(String ID) {
		destid=ID;		
	}

	public Variables variables() {
		return pproblem.variables();
	}
}
