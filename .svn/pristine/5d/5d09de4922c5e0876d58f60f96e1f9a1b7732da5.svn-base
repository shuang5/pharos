package org.renci.pharos.gui;

import org.renci.doe.pharos.flow.Rules;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Edge;

public final class NodeLine extends UndirectedLine{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String label;
	private String linkType;
	private String ID;
	private int port1=-1;
	private int port2=-1;
	public NodeLine(){
	}
	public NodeLine(Edge e) {
		e=Preconditions.checkNotNull(e);
		rules=new Rules();
   	 	type=ShapeType.NodeLine;
	   	 if (e.getProperty("ID")!=null) {
			 String s=(String)e.getProperty("ID");
			 if(!s.isEmpty()) setId(s);
		 }
		 if (e.getProperty("LinkType")!=null) {
			 String s=(String)e.getProperty("LinkType");
			 if(!s.isEmpty()) setLinkType(s);
		 }
		 if (e.getProperty("Rules")!=null){
			 String s=(String)e.getProperty("Rules");
			 if(!s.isEmpty())
				 setRules(s);
		 }
		 if (e.getProperty("In")!=null){
			 String s=(String)e.getProperty("In");
			if(!s.isEmpty()){
				 PortProperties p=new PortProperties(s);
				 setPort1(Integer.parseInt(p.getId()));
			}
		 }
		 if (e.getProperty("Out")!=null){
			 String s=(String)e.getProperty("Out");
			 if(!s.isEmpty()){
				 PortProperties p=new PortProperties(s);
				 setPort2(Integer.parseInt(p.getId()));
			}
		 }
		 
		 setLabel(e.getLabel());
	}
	public void setBluePrintEdge(Edge e, boolean reverse) {
		e=Preconditions.checkNotNull(e);
		e.setProperty("ID", getId());
		//by blueprint's convention
		//if (reverse==false)
		//port1 is equivalent to port out
		//port2 is equivalent to port in
		//else 
		//port1 is port in
		//port2 is port out
		//when we save the graph, we lose leftness and rightness
		if(!reverse){
			e.setProperty("Peers","("+e.getVertex(Direction.IN).getId()+":"+String.valueOf(getPort2())+
				","+e.getVertex(Direction.OUT).getId()+":"+String.valueOf(getPort1())+")");
		}
		else {
			e.setProperty("Peers","("+e.getVertex(Direction.IN).getId()+":"+String.valueOf(getPort1())+
					","+e.getVertex(Direction.OUT).getId()+":"+String.valueOf(getPort2())+")");
		}
		if(!virtual){
			e.setProperty("Virtual", "No");
			if(getLinkType()!=null)
				e.setProperty("LinkType",getLinkType());
		}
		else {
			e.setProperty("Virtual", "Yes");
			if(getRules()!=null)
				e.setProperty("Rules",getRules());
		}
			
	}
	
	public void setLabel(String d){
		label=Preconditions.checkNotNull(d);
	}
	public void setId(String d){
		ID=Preconditions.checkNotNull(d);
	}
	public void setLinkType(String d){
		linkType=Preconditions.checkNotNull(d);
	}
	
	public void setPort1(int d){
		((NodeNode)getNode1()).associateLine2Port(this,d);
		port1=d;
	}
	public void setPort2(int d){
		((NodeNode)getNode2()).associateLine2Port(this,d);
		port2=d;
	}
	public int getPort1(){
		return port1;
	}
	public int getPort2(){
		return port2;
	}
	public String getLabel(){
		return label;
	}
	public String getId(){
		return ID;
	}
	public String getLinkType(){
		return linkType;
	}
	
	@Override
	boolean configComplete() {
		if(Strings.isNullOrEmpty(this.getId()))return false;
		else if(Strings.isNullOrEmpty(this.getLinkType()))return false;
		else if(getPort1()==-1 || getPort2()==-1) return false;
		return true;
	}
}

