package org.renci.pharos.gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;

import org.renci.doe.pharos.flow.PharosException;
import org.renci.doe.pharos.flow.Rule;
import org.renci.doe.pharos.flow.Rules;

import com.tinkerpop.blueprints.Edge;

public abstract class Line extends Drawings 
{
   
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	protected boolean xSelected=false,ySelected=false;
	protected Rules rules;
	//node attached to (x1,y1),
	//convention is for the line, it leaves node1 and enters node2
	private Node node1; 
	//node attached to (x2,y2)
	private Node node2; 
	boolean virtual=false;
	Line(){
		setColor(Color.black);
	}
	public void makeVirtual(){
		virtual=true;
	}
	public boolean isVirtual(){
		return virtual;
	}
	public void setNode1(Node n){
		
		node1=n;
	}
	public void setNode2(Node n){
		node2=n;
	}
	public Node getNode1(){
		return node1;
	}
	public Node getNode2(){
		return node2;
	}
	public void switchDirection(){
		int xx1=this.x1;
		int yy1=this.y1;
		this.x1=this.x2;
		this.y1=this.y2;
		this.x2=xx1;
		this.y2=yy1;
	}
	//users don't know which is node1/node2,
	//which is used internally by blueprint as vertexOut/vertexIn
	//users know left/right/up/down
	//we need to keep a mapping from left/right/up/down
	//to node1/node2
	public Node getLeftorUpNode(){
		if(x1<x2)return getNode1();
		else if(x1>x2)return getNode2();
		else if(y1>y2)return getNode1();
		else return getNode2();		
	}
	public Node getRightorDownNode(){
		if(x1<x2)return getNode2();
		else if(x1>x2)return getNode1();
		else if(y1>y2)return getNode2();
		else return getNode1();		
	}
	public void setLeftorUpNode(Node n){
		if(x1<x2)setNode1(n);
		else if(x1>x2)setNode2(n);
		else if(y1>y2)setNode1(n);
		else setNode2(n);		
	}
	public void setRightorDownNode(Node n){
		if(x1<x2)setNode2(n);
		else if(x1>x2)setNode1(n);
		else if(y1>y2)setNode2(n);
		else setNode1(n);		
	}
	public boolean isXSelected (){
		return xSelected;
	}
	public boolean isYSelected (){
		return ySelected;
	}
	void repositionAttached(){
		
	}

	void draw(Graphics2D g2d) {
        g2d.setPaint(getColor());
        g2d.setStroke(new BasicStroke(stroke,
                BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
        Line2D.Double line = new Line2D.Double(x1, y1, x2, y2);
        shape=line;
        g2d.draw(line);
        //g2d.fill(createArrowShape(new Point(x1,y1), new Point (x2,y2)));
    }
	
	int centerX(){
		return (x1+x2)/2;
	}
	int centerY(){
		return (y1+y2)/2;
	}
	public void setRules(String d){
		rules=new Rules(d);
	}
	public String getRules(){
		if(rules!=null)
			return rules.toString();
		else return null;
	}
	public void addRule(Rule r){
		try {
			rules.addRule(r);
		} catch (PharosException e) {
			e.printStackTrace();
		}
	}
	public void addRuleTable(Rule r){
		rules.addRuleTable(r);	
	}
	public boolean rulesEmpty(){
		if (rules==null) return true;
		else return false;
	}
	abstract void setBluePrintEdge(Edge e, boolean reverse);
	
	
}