package org.renci.pharos.gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.QuadCurve2D;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;

import org.renci.doe.pharos.flow.PharosException;
import org.renci.doe.pharos.flow.Rule;
import org.renci.doe.pharos.flow.Rules;

import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Vertex;

abstract class Drawings implements Serializable
{
    /**
	 * 
	 */
	private static final long serialVersionUID = 1788928423201041136L;
	/**
	 * 
	 */
	int x1, y1, x2, y2; 
    int R, G, B;        
    float stroke;      
    ShapeType type;       
        
    protected Shape shape;
    
    Shape getShape(){
    	return shape;
    }
    public void setColor(int r, int g, int b){
    	R=r;
    	G=g;
    	B =b;
    }
    abstract int centerX();
    abstract int centerY();
    abstract boolean contains(int x,int y);
    abstract void draw(Graphics2D g2d);
    abstract void repositionAttached();
    abstract void remove();
	public static Shape createArrowShape(Point fromPt, Point toPt) {
		    Polygon arrowPolygon = new Polygon();
		    arrowPolygon.addPoint( 0,5);
		    arrowPolygon.addPoint( -5, -5);
		    arrowPolygon.addPoint( 5,-5);


		    double rotate = Math.atan2(toPt.y - fromPt.y, toPt.x - fromPt.x);

		    AffineTransform transform = new AffineTransform();
		   
		    transform.translate(midpoint(fromPt,toPt).x, midpoint(fromPt,toPt).y);
		    transform.rotate((rotate-Math.PI/2d)); 

		    return transform.createTransformedShape(arrowPolygon);
		}

		private static Point midpoint(Point p1, Point p2) {
		    return new Point((int)((p1.x + p2.x)/2.0), 
		                     (int)((p1.y + p2.y)/2.0));
		}

}

class LineFactory{
	public static Line createLine(Mode mode, State state){
		if (mode==Mode.PortMode && state==State.Provider){
			return new PortLine();
		}
		else if (mode==Mode.PortMode && state==State.Request){
			return new RequestPortLine();
		}
		else if (mode==Mode.NodeMode && state==State.Provider){
			return new NodeLine();
		}
		else if (mode==Mode.NodeMode && state==State.Request){
			return new RequestNodeLine();
		}
		else return null;
	}
}

class NodeFactory{
	public static Node createNode(Mode mode){
		if (mode==Mode.PortMode){
			return new PortNode();
		}
		else if (mode==Mode.NodeMode){
			return new NodeNode();
		}
		else return null;
	}
}

abstract class Line extends Drawings 
{
   
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	protected boolean xSelected=false,ySelected=false;
	protected Rules rules;
	//node attached to (x1,y1),
	//convention is for the line, it leaves node1 and enters node2
	private Node node1; 
	//node attached to (x2,y2)
	private Node node2; 
	boolean virtual=false;
	public void makeVirtual(){
		virtual=true;
	}
	public boolean isVirtual(){
		return virtual;
	}
	public void setNode1(Node n){
		
		node1=n;
	}
	public void setNode2(Node n){
		node2=n;
	}
	public Node getNode1(){
		return node1;
	}
	public Node getNode2(){
		return node2;
	}
	public void switchDirection(){
		int xx1=this.x1;
		int yy1=this.y1;
		this.x1=this.x2;
		this.y1=this.y2;
		this.x2=xx1;
		this.y2=yy1;
	}
	//users don't know which is node1/node2,
	//which is used internally by blueprint as vertexOut/vertexIn
	//users know left/right/up/down
	//we need to keep a mapping from left/right/up/down
	//to node1/node2
	public Node getLeftorUpNode(){
		if(x1<x2)return getNode1();
		else if(x1>x2)return getNode2();
		else if(y1>y2)return getNode1();
		else return getNode2();		
	}
	public Node getRightorDownNode(){
		if(x1<x2)return getNode2();
		else if(x1>x2)return getNode1();
		else if(y1>y2)return getNode2();
		else return getNode1();		
	}
	public void setLeftorUpNode(Node n){
		if(x1<x2)setNode1(n);
		else if(x1>x2)setNode2(n);
		else if(y1>y2)setNode1(n);
		else setNode2(n);		
	}
	public void setRightorDownNode(Node n){
		if(x1<x2)setNode2(n);
		else if(x1>x2)setNode1(n);
		else if(y1>y2)setNode2(n);
		else setNode1(n);		
	}
	public boolean isXSelected (){
		return xSelected;
	}
	public boolean isYSelected (){
		return ySelected;
	}
	void repositionAttached(){
		
	}

	void draw(Graphics2D g2d) {
        g2d.setPaint(new Color(R, G, B));
        g2d.setStroke(new BasicStroke(stroke,
                BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
        Line2D.Double line = new Line2D.Double(x1, y1, x2, y2);
        shape=line;
        g2d.draw(line);
        //g2d.fill(createArrowShape(new Point(x1,y1), new Point (x2,y2)));
    }
	
	int centerX(){
		return (x1+x2)/2;
	}
	int centerY(){
		return (y1+y2)/2;
	}
	public void setRules(String d){
		rules=new Rules(d);
	}
	public String getRules(){
		if(rules!=null)
			return rules.toString();
		else return null;
	}
	public void addRule(Rule r){
		try {
			rules.addRule(r);
		} catch (PharosException e) {
			e.printStackTrace();
		}
	}
	public void addRuleTable(Rule r){
		rules.addRuleTable(r);	
	}
	public boolean rulesEmpty(){
		if (rules==null) return true;
		else return false;
	}
	abstract void setBluePrintEdge(Edge e, boolean reverse);
	
	
}

abstract class DirectedLine extends Line{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	void draw(Graphics2D g2d) {
        g2d.setPaint(new Color(R, G, B));
        g2d.setStroke(new BasicStroke(stroke,
                BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
        Line2D.Double line = new Line2D.Double(x1, y1, x2, y2);
        shape=line;
        g2d.draw(line);
        g2d.fill(createArrowShape(new Point(x1,y1), new Point (x2,y2)));
    }
	//node1 is the start node
	public void setStartNode(Node n){
		setNode1(n);
	}
	//node2 is the end node
	public void setEndNode(Node n){
		setNode2(n);
	}
	public DirectedNode getStartNode(){
		return (DirectedNode)getNode1();
	}
	public DirectedNode getEndNode(){
		return (DirectedNode)getNode2();
	}
	boolean contains(int x,int y){
		xSelected=false;
		ySelected=false;
		if (x<Math.min(x1, x2) || x>Math.max(x1, x2) || y<Math.min(y1, y2) || y>Math.max(y1, y2))
			return false;
		double d=Math.abs((x2-x1)*(y1-y)-(x1-x)*(y2-y1))/Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
		if(d<3) {
			if(Math.sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1))<3) xSelected=true;
			else if(Math.sqrt((x-x2)*(x-x2)+(y-y2)*(y-y2))<3) ySelected=true;
			return true;
		}
		else return false;
		//return getShape().getBounds().contains(x,y);
	}
	void remove(){
		((DirectedNode)getStartNode()).removeLinkedOut(this);
		((DirectedNode)getEndNode()).removeLinkedIn(this);
	}
}
/**
 * @author shuang
 *
 */
abstract class UndirectedCurvedDottedLine extends Line{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int controlx, controly;
	
	public UndirectedCurvedDottedLine(){
		controlx=x1;
		controly=y1;
	}
	public void setControlPoint (int x, int y){
		controlx=x;
		controly=y;
	}
	public int getControlX(){
		return controlx;
	}
	public int getControlY(){
		return controly;
	}
	void draw(Graphics2D g2d) {
        g2d.setPaint(Color.gray);
        g2d.setStroke(new BasicStroke(3, BasicStroke.CAP_BUTT, 
        		BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0));
        //Line2D.Double line = new Line2D.Double(x1, y1, x2, y2);
        QuadCurve2D.Double curve = new QuadCurve2D.Double(x1,y1,controlx,controly,x2,y2);
        shape=curve;
        //g2d.setRenderingHint(
        //	    RenderingHints.KEY_ANTIALIASING,
        //	    RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.draw(curve);
    }
	
	private boolean linecontains(int x1, int y1, int x2, int y2, int x, int y){
		double d=Math.abs((x2-x1)*(y1-y)-(x1-x)*(y2-y1))/Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
		if(d<2) {
			if(Math.sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1))<3) xSelected=true;
			else if(Math.sqrt((x-x2)*(x-x2)+(y-y2)*(y-y2))<3) ySelected=true;
			return true;
		}
		else return false;
	}
	class Pair{
		public Pair(int xx1, int yy1, int xx2, int yy2) {
			x1=xx1;
			y1=yy1;
			x2=xx2;
			y2=yy2;
		}
		public int x1;
		public int y1;
		public int x2;
		public int y2;
	}
	private void spliceLine(int x1,int y1,int x2,int y2, Vector<Pair> pairs){
		//is 6 close enough?
		if(Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))<6){
			pairs.add(new Pair(x1,y1,x2,y2));
		}
		else {
			int cx=(x1*3+x2)/4;
			int cy=(y2*3+y1)/4;
			spliceLine(x1,y1,cx,cy,pairs);
			spliceLine(cx,cy,x2,y2,pairs);
		}
	}
	boolean contains(int x,int y){
		xSelected=false;
		ySelected=false;
		if (x<Math.min(x1, x2) || x>Math.max(x1, x2) || y<Math.min(y1, y2) || y>Math.max(y1, y2))
			return false;
		//slice the curve to line segments
		//the formula is controlx=(x1*3+x2)/4, controly=(y2*3+y1)/4
		
		Vector<Pair> pairs=new Vector<Pair>();
		spliceLine(x1,y1,x2,y2,pairs);
		for(Pair p : pairs){
			if (linecontains(p.x1,p.y1,p.x2,p.y2,x,y))return true;
		}
		
		return false;
		//return getShape().getBounds().contains(x,y);
	}
	void remove(){}
}

abstract class UndirectedLine extends Line{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	void draw(Graphics2D g2d) {
        g2d.setPaint(new Color(R, G, B));
        g2d.setStroke(new BasicStroke(stroke,
                BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
        Line2D.Double line = new Line2D.Double(x1, y1, x2, y2);
        shape=line;
        g2d.draw(line);
        g2d.fillOval(x1-4, y1-4, 8, 8);
        g2d.fillOval(x2-4, y2-4, 8, 8);
    }
	
	
	boolean contains(int x,int y){
		xSelected=false;
		ySelected=false;
		if (x<Math.min(x1, x2) || x>Math.max(x1, x2) || y<Math.min(y1, y2) || y>Math.max(y1, y2))
			return false;
		double d=Math.abs((x2-x1)*(y1-y)-(x1-x)*(y2-y1))/Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
		if(d<3) {
			if(Math.sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1))<3) xSelected=true;
			else if(Math.sqrt((x-x2)*(x-x2)+(y-y2)*(y-y2))<3) ySelected=true;
			return true;
		}
		else return false;
		//return getShape().getBounds().contains(x,y);
	}
	void remove(){
		((UndirectedNode)getNode1()).removeLink(this);
		((UndirectedNode)getNode2()).removeLink(this);
		
	}
}

abstract class Node extends Drawings
{
    
    public Node(){
    	
    }
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	
	Set<Line> linkedToIn=new HashSet<Line>();
	Set<Line> linkedToOut=new HashSet<Line>();
	Set<Line> linkedToInReq=new HashSet<Line>();
	Set<Line> linkedToOutReq=new HashSet<Line>();
    void addLinkedIn(Line d){
    	linkedToIn.add(d);
    }
    void removeLinkedIn(Line d){
    	linkedToIn.remove(d);
    }
    void addLinkedOut(Line d){
    	linkedToOut.add(d);
    }
    void removeLinkedOut(Line d){
    	linkedToOut.remove(d);
    }
    void addLinkedInReq(Line d){
    	linkedToInReq.add(d);
    }
    void removeLinkedInReq(Line d){
    	linkedToInReq.remove(d);
    }
    void addLinkedOutReq(Line d){
    	linkedToOutReq.add(d);
    }
    void removeLinkedOutReq(Line d){
    	linkedToOutReq.remove(d);
    }
    void removeAllLinks(){
    	linkedToIn.clear();
    	linkedToOut.clear();
    	linkedToInReq.clear();
    	linkedToOutReq.clear();
    }
    int getNumberOfInLinks(){
    	if(linkedToIn.isEmpty())return 0;
    	else 
    		return linkedToIn.size();
    }
    int getNumberOfOutLinks(){
    	if(linkedToOut.isEmpty())return 0;
    	else 
    		return linkedToOut.size();
    }
    int getNumberOfInLinksReq(){
    	if(linkedToInReq.isEmpty())return 0;
    	else 
    		return linkedToInReq.size();
    }
    int getNumberOfOutLinksReq(){
    	if(linkedToOutReq.isEmpty())return 0;
    	else 
    		return linkedToOutReq.size();
    }
	void draw(Graphics2D g2d) {
		Ellipse2D.Double circle = new Ellipse2D.Double(Math.min(x1, x2), Math.min(y1, y2),
                Math.max(Math.abs(x1 - x2), Math.abs(y1 - y2)),
                Math.max(Math.abs(x1 - x2), Math.abs(y1 - y2)));
		//Ellipse2D.Double circle = new Ellipse2D.Double(x1,y1,x2,x2);
        g2d.setPaint(new Color(R, G, B));
        g2d.setStroke(new BasicStroke(stroke));
        shape=circle;
        g2d.draw(circle);
        g2d.setColor(Color.blue);
        g2d.fill(circle);
                
		//ImageIcon icon = new ImageIcon("figs/circle.png");
	    //g2d.drawImage(icon.getImage(), x2, y2, null);
	    
	    
    }
	boolean contains(int x,int y){
		if (x>=(Math.min(x1, x2)-1) && x<= (Math.min(x1, x2)+Math.max(Math.abs(x1 - x2), Math.abs(y1 - y2))+1) &&
				y>=(Math.min(y1, y2)-1) && y<=(Math.min(y1, y2)+Math.max(Math.abs(x1 - x2), Math.abs(y1 - y2))+1))
				return true;
		else return false;
		//return getShape().contains(x,y);
	}
	int centerX(){
		return Math.min(x1, x2)+Math.max(Math.abs(x1 - x2), Math.abs(y1 - y2))/2;
	}
	int centerY(){
		return Math.min(y1, y2)+Math.max(Math.abs(x1 - x2), Math.abs(y1 - y2))/2;
	}
	abstract Vertex getBluePrintVertex();
	
}


abstract class UndirectedNode extends Node {
	private static final long serialVersionUID = 1L;
	void addLink(Line d){
	    addLinkedIn(d);	    
	    addLinkedOut(d);
	}
	void removeLink(Line d){
    	removeLinkedIn(d);
    	removeLinkedOut(d);
    }
	int getNumberOfLinks(){
    	return getNumberOfInLinks();
    }
	void addLinkReq(Line d){
	    addLinkedInReq(d);
	    addLinkedOutReq(d);
	}
	void removeLinkReq(Line d){
    	removeLinkedInReq(d);
    	removeLinkedOutReq(d);
    }
	int getNumberOfLinksReq(){
    	return getNumberOfInLinksReq();
    }
	void repositionAttached(){
		for (Drawings d: linkedToIn){
			if(((Line)d).getNode1()==this){
				d.x1=centerX();
				d.y1=centerY();
			}
			else {
				d.x2=centerX();
				d.y2=centerY();
			}
		}         
	}
	void remove(){
		removeAllLinks();
	}
	
}
abstract class DirectedNode extends Node {
	private static final long serialVersionUID = 1L;
	void repositionAttached(){
		for (Drawings d: linkedToIn){
			try{
    			d.x1=centerX();
    			d.y1=centerY();
    			
    		}
			catch (Exception ex){
				assert false;
			}
		}         
		for (Drawings d: linkedToOut){
			try{
    			d.x2=centerX();
    			d.y2=centerY();
    		}
			catch (Exception ex){
				assert false;
			}
		}         
	}
	void remove(){
		removeAllLinks();
	}
}