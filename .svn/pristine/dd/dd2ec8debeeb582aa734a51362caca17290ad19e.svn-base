package org.renci.pharos.lp;

import static com.google.common.base.Preconditions.checkNotNull;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;


import net.sf.javailp.Linear;
import net.sf.javailp.Result;
import net.sf.javailp.Solver;
import net.sf.javailp.SolverFactory;
import net.sf.javailp.SolverFactoryLpSolve;

import com.sun.tools.javac.util.Pair;

public class MCFlowProblem extends ProblemDecorator{
	private final static Logger logger = Logger.getLogger(MCFlowProblem.class.getName());
	private HashSet<Pair<String,String>> sdpairs;
	
	public MCFlowProblem(SSSDFlowProblem p) {
		checkNotNull(p);
		pproblem=p;
		FlowAssignmentVariables8D fav=(FlowAssignmentVariables8D)variables();
		sdpairs=new HashSet<Pair<String, String>>(fav.getConstants().keySet());
	}
	public void addIntegerConstraints(){
		logger.log(Level.INFO,"adding Integer constraints:");
		for(String s: variables().getAllVariables()){
			pproblem.problem().setVarType(s,Boolean.class);
		}
	}
	public void addNonIntegerConstraints(){
		logger.log(Level.INFO,"adding Integer constraints:");
		for(String s: variables().getAllVariables()){
			pproblem.problem().setVarType(s,Double.class);
		}
	}
	public void addRequestConstraints(){
		logger.log(Level.INFO,"adding request constraints:");
		for(Pair<String,String> sd: sdpairs){
			((SSSDFlowProblem)pproblem).setSource(sd.fst);
			((SSSDFlowProblem)pproblem).setDestination(sd.snd);
			((SSSDFlowProblem)pproblem).addRequestConstraints();
		}
	}
	public void addLabelConstraints(){
		logger.log(Level.INFO,"adding label assignment constraints:");
		for(Pair<String,String> sd: sdpairs){
			((SSSDFlowProblem)pproblem).setSource(sd.fst);
			((SSSDFlowProblem)pproblem).setDestination(sd.snd);
			((SSSDFlowProblem)pproblem).addLabelConstraints();
		}
	}
	public void addFlowConservationConstraints(){
		logger.log(Level.INFO,"adding flow constraints:");
		for(Pair<String,String> sd: sdpairs){
			((SSSDFlowProblem)pproblem).setSource(sd.fst);
			((SSSDFlowProblem)pproblem).setDestination(sd.snd);
			((SSSDFlowProblem)pproblem).addFlowConservationConstraints();
		}
	}
	public void addCapacityConstraints(){
		logger.log(Level.INFO,"adding capacity constraints:");
		FlowAssignmentVariables8D fav=(FlowAssignmentVariables8D)variables();
		String[] s=new String[]{"+","+","+","+","*","*","*","*"};
		ArrayList<Linear> arr=fav.generateLinears(s, fav.getSum());
		for(Linear l:arr){
			if(l.size()>0)problem().add(l, "<=", 1);
			logger.log(Level.FINE,l+" <= "+ 1);
		}
	}
	public Variables variables() {
		return pproblem.variables();
	}
	public ArrayList<String> getProviderVariables(){
		return ((FlowAssignmentVariables8D)variables()).getProviderVariables();
	}
	public ArrayList<String> getRequestVariables(){
		return ((FlowAssignmentVariables8D)variables()).getRequestVariables();
	}
	SolverFactory factory = new SolverFactoryLpSolve(); // use lp_solve
	//SolverFactory factory = new SolverFactoryGurobi(); // use gurobi
	{
		factory.setParameter(Solver.VERBOSE, 0); 
		factory.setParameter(Solver.TIMEOUT, 10000); // set timeout to 10000 seconds
		
	}
	public Result compute(ComputeMode mode){
		switch(mode){
		case ILP:
			return ilp();
		case Heuristic:
			return heuristic();
		case LPRelaxation:
			return lprelax();
		default:
			break;
		}
		return null;
	}
	private Result ilp(){
		this.addIntegerConstraints();
		this.addLabelConstraints();
		this.addCapacityConstraints();
		this.addRequestConstraints();
		this.addFlowConservationConstraints();
		//objective
		logger.log(Level.INFO,"setting objective function");
		Linear linear = new Linear();
		ArrayList<String> arr=getProviderVariables();
		for(String s: arr){
		  linear.add(1,s);
		}
		logger.log(Level.INFO, "number of variables is: "+
				(arr.size()+getRequestVariables().size())); 
		this.setObjective(linear, OBJ.MIN);
		
		Solver solver = factory.get(); // you should use this solver only once for one problem
		logger.log(Level.INFO,"Solving...");
		final Result result = solve(solver);
		if(result!=null){
			logger.log(Level.INFO,"Objective: "+String.valueOf(result.getObjective()));
		}
		else logger.log(Level.INFO,"no feasible soltuion found!");
		return result;
	}
	private Result lprelax(){
		this.addNonIntegerConstraints();
		this.addLabelConstraints();
		this.addCapacityConstraints();
		this.addRequestConstraints();
		this.addFlowConservationConstraints();
		//objective
		logger.log(Level.INFO,"setting objective function");
		Linear linear = new Linear();
		ArrayList<String> arr=getProviderVariables();
		for(String s: arr){
		  linear.add(1,s);
		}
		logger.log(Level.INFO, "number of variables is: "+
				(arr.size()+getRequestVariables().size())); 
		this.setObjective(linear, OBJ.MIN);
		
		Solver solver = factory.get(); // you should use this solver only once for one problem
		logger.log(Level.INFO,"Solving...");
		final Result result = solve(solver);
		if(result!=null){
			logger.log(Level.INFO,"Objective: "+String.valueOf(result.getObjective()));
		}
		else logger.log(Level.INFO,"no feasible soltuion found!");
		return result;
	}
	private Result heuristic(){
		return null;
	}
}
