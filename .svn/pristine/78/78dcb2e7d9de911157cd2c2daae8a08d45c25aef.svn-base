package org.renci.pharos.gui;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;


abstract class TopologyGraph{

	protected Set<Drawings> itemList;
    private Drawings selectedItem;
    private Drawings currentItem;
    //to quickly lookup ids
    private HashSet<String> edgeIds=Sets.newHashSet();
    private HashMap<String, ArrayList<Integer>> nodeIds=Maps.newHashMap();

	
    public void setCurrentItem(Drawings d){
    	currentItem=d;
    }
    public Drawings getCurrentItem(){
    	return currentItem;
    }
    private MainGUI tgrt;
    public void remove(Drawings d){
    	d=Preconditions.checkNotNull(d);
    	removeItem(d);
    	d.remove();
    }
    private void removeItem(Drawings d){
    	d=Preconditions.checkNotNull(d);
    	if(d.getShapeType()==ShapeType.NodeNode){
    		((NodeNode)d).remove();
    		for (Drawings line: ((Node)d).inLinks()){
				itemList.remove(line);
			}
			for (Drawings line: ((Node)d).outLinks()){
				itemList.remove(line);
			}    	
			if(!Strings.isNullOrEmpty(((NodeNode)d).getId()))
	    		removeNodeId(((NodeNode)d).getId());
    	}
    	else if (d.getShapeType()==ShapeType.PortNode ){
    		((PortNode)d).remove();
			for (Drawings line: ((Node)d).inLinks()){
				itemList.remove(line);
			}
			for (Drawings line: ((Node)d).outLinks()){
				itemList.remove(line);
			}
    	}
    	else if (d.getShapeType()==ShapeType.NodeLine){
    		if(!Strings.isNullOrEmpty(((NodeLine)d).getId()))
	    		removeEdgeId(((NodeLine)d).getId());
    	}
    	
    	itemList.remove(d);
    }
    public void addItem(Drawings d){
    	d=Preconditions.checkNotNull(d);
    	itemList.add(d);
    }
    
    public void unSetSelectedItem(){
    	selectedItem=null;
    }
    public int getListSize(){
    	return itemList.size();
    }
    public Drawings getSelectedItem(){
    	return selectedItem;
    }
    
    public ShapeType getSelectedItemType(){
    	if(hasSelectedItem())
    		return selectedItem.getShapeType();
    	else return null;
    }
	public TopologyGraph(MainGUI t) {
		this.itemList = new HashSet<Drawings>();
		this.selectedItem = null;
		tgrt=t;
	}
	public void repaint(){
		tgrt.repaint();
	}
    public boolean isItemFocused(int x, int y){
		if (itemContains(x,y)!=null) return true;
		else return false;
	}	  
	public boolean hasSelectedItem(){
		if(selectedItem!=null)return true;
		else return false;
	}
	public boolean hasSelectedNode(){
		if (hasSelectedItem()){
			if(selectedItem.getShapeType()==ShapeType.PortNode || selectedItem.getShapeType()==ShapeType.NodeNode)
				return true;
			else return false;
		}
		else return false;
	}
	public ShapeType selectedShapeType(){
		if(!hasSelectedItem())return null;
		return selectedItem.getShapeType();
	}
	
	 //finds the item that contains (x,y)
	 public  Drawings itemContains(int x, int y){
		 Drawings found=null;
		   for (Drawings d : itemList){
			   if (d.contains(x,y)){
				   if(d.getShapeType()==ShapeType.PortNode || d.getShapeType()==ShapeType.NodeNode)
					   return d;
				   else
					   if (found==null)found=d;
			   }
		   }
		   return found;
	 }
	 public void attachLines (Node n){
		 for (Drawings d : itemList){
			   if (d.getShapeType()==ShapeType.PortLine){
				   if (n.contains(d.x1,d.y1) && ((DirectedLine)d).getStartNode()==null){
					   d.x1=n.centerX();
					   d.y1=n.centerY();
					   ((DirectedLine)d).setStartNode(n);
					   n.addLinkedIn((Line)d);
				   }
				   else if(n.contains(d.x2,d.y2)&& ((DirectedLine)d).getEndNode()==null){
					   d.x2=n.centerX();
					   d.y2=n.centerY();
					   ((DirectedLine)d).setEndNode(n);
					   n.addLinkedOut((Line)d);
				   } 
			   }
			   else if (d.getShapeType()==ShapeType.NodeLine || d.getShapeType()==ShapeType.RequestNodeLine){
				   if (n.contains(d.x1,d.y1) && ((Line) d).getNode1()==null){
					   d.x1=n.centerX();
					   d.y1=n.centerY();
					   ((UndirectedLine)d).setNode1(n);
					   ((NodeNode)n).addLinkOut((Line)d);
				   }
				   else if(n.contains(d.x2,d.y2)&& ((Line)d).getNode2()==null){
					   d.x2=n.centerX();
					   d.y2=n.centerY();
					   ((UndirectedLine)d).setNode2(n);
					   ((NodeNode)n).addLinkIn((Line)d);
				   } 
			   }
		   }
	 }
	 public void selectItem(int x, int y){
		 selectedItem=itemContains(x,y);
	 }
	 public void draw(Graphics g){
		 Graphics2D g2d = (Graphics2D) g;  
         for (Drawings s : itemList) {
        	 s.draw(g2d);
         }
	 }
	 public void newTopo(){
		 this.itemList = new HashSet<Drawings>();
		 this.selectedItem = null;
		 this.currentItem=null;
		 edgeIds=Sets.newHashSet();
		 nodeIds=Maps.newHashMap();
	 }
	 abstract void openFromFile(File fileName) throws Exception;
	 abstract void saveTofile(File fileName) throws Exception;
	 abstract void saveRequest(File fileName);

   	public boolean isEdgeIdUsed(String id){
 		id=Preconditions.checkNotNull(id);
 		if(edgeIds.contains(id)) return true;
 		else return false;
 	}
 	public void addEdgeId(String id){
 		if(!isEdgeIdUsed(id)) edgeIds.add(id);
 	}
 	public void removeEdgeId(String id){
 		if(isEdgeIdUsed(id)) edgeIds.remove(id);
 	}
 	public boolean isNodeIdUsed(String id){
 		id=Preconditions.checkNotNull(id);
 		return nodeIds.containsKey(id);
 	}
 	public boolean isPortNumUsed(Node node, int p){
 		node=Preconditions.checkNotNull(node);
 		String id=node.getId();
 		if(Strings.isNullOrEmpty(id))return false;
 		else if (nodeIds.containsKey(id) && nodeIds.get(id).contains(p))return true;
 		else return false;
 	}
 	public void addNodeId(String id, int usedport){
 		if(isNodeIdUsed(id)) {
 			ArrayList<Integer> arr=nodeIds.get(id);
 			if(!arr.contains(usedport))arr.add(usedport);
 		}
 		else nodeIds.put(id, new ArrayList<Integer>(usedport));
 	}
 	public void removeNodeId(String id, int usedport){
 		if(isNodeIdUsed(id)) {
 			ArrayList<Integer> arr=nodeIds.get(id);
 			if(!arr.contains(usedport))arr.remove(usedport);
 		}
 	}
 	public void addNodeId(String id){
 		if(!isNodeIdUsed(Preconditions.checkNotNull(id))) {
 			nodeIds.put(id, new ArrayList<Integer>());
 		}
 	}
 	public void removeNodeId(String id){
 		if(isNodeIdUsed(Preconditions.checkNotNull(id))) {
 			nodeIds.remove(id);
 		}
 	}
}

