package org.renci.pharos.gui;

import org.apache.commons.lang.StringUtils;
import org.renci.doe.pharos.flow.FlowSpace;
import org.renci.doe.pharos.flow.FlowUnit;
import org.renci.doe.pharos.graph.def.Node;

import com.tinkerpop.blueprints.Vertex;
class PortProperties {
	private String Domain;
	private String ID;
	private String DPID;
	private String Type;
	private int Port=-1;
	private String FV;
	private PortProperties peer;
	private Line associatedLine=null;
	FlowSpace flowspace;
	//static Logger log=Logger.getLogger(PortProperties.class.getName());
	public void setDomain(String d){
		if(!StringUtils.isEmpty(d) && !StringUtils.isBlank(d))Domain=d;
	}
	public void setId(String d){
		if(!StringUtils.isEmpty(d) && !StringUtils.isBlank(d))ID=d;
	}
	public void setDPID(String d){
		if(!StringUtils.isEmpty(d) && !StringUtils.isBlank(d))DPID=d;
	}
	public void setPort(int d){
		if(d>=0 && d<Node.MaxNumPorts)Port=d;
	}
	public void setType(String d){
		if(!StringUtils.isEmpty(d) && !StringUtils.isBlank(d))Type=d;
	}
	public void setFlowspace(String fs) throws Exception{
		if(StringUtils.isEmpty(fs) || StringUtils.isBlank(fs))return;
		try{
			flowspace=new FlowSpace(fs);
		}
		catch(Exception ex){
			throw ex;
		}
	}
	public void setFlowvisor(String d){
		if(!StringUtils.isEmpty(d) && !StringUtils.isBlank(d))FV=d;
	}
	public void setLineAssociation(Line l){
		if(l!=null)associatedLine=l;
	}
	public String getFlowvisor(){
		return FV;
	}
	public String getDomain(){
		return Domain;
	}
	public String getId(){
		return ID;
	}
	public String getPort(){
		return Integer.toString(Port);
	}
	public String getType(){
		return Type;
	}
	public String getDPID(){
		return DPID;
	}
	public Line getLineAssociation(){
		return associatedLine;
	}
	public void setPeer(PortProperties p){
		peer=p;
	}
	public PortProperties getPeer(){
		return peer;
	}
	public String getFlowSpace(){
		return flowspace.toString();
	}
	public void addFlowSpace(FlowUnit fu){
		flowspace.add(fu);
	}
	public void removeFlowSpace(FlowUnit fu){
		flowspace.remove(fu);
	}
	public String toString(){
		return Domain+','+ID+','+DPID+','+Type+','+getPort()+','+getFlowSpace();
	}
	public PortProperties(String s) {
		if(StringUtils.isEmpty(s) || StringUtils.isBlank(s) || s.equals("null"))
			return;
		String delims="[,]";
		String[] tokens=s.split(delims);
		setDomain(tokens[0]);
		setId(tokens[1]);
		setDPID(tokens[2]);
		setType(tokens[3]);
		setPort(Integer.parseInt(tokens[4]));
		try {
			setFlowspace(tokens[5]);
		}
		catch (Exception ex){
			//write to log
			//log.debug("flowspace parse error");
		}
	}
	
	protected PortProperties(){
		flowspace=new FlowSpace();
	}
}
public class PortNode extends DirectedNode{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Vertex v;
	private PortProperties pp;
	{
		pp= new PortProperties();
	}
	public PortNode(Vertex vv) {
    	v=vv;
		type=ShapeType.PortNode;
		 if (v.getProperty("Domain")!=null) 
			 pp.setDomain((String)v.getProperty("Domain"));
		 if (v.getProperty("DPID")!=null) 
			 pp.setDPID((String)v.getProperty("DPID"));
		 if (v.getProperty("Port")!=null) 
			 pp.setPort(Integer.parseInt((String)v.getProperty("Port")));
		 if (v.getProperty("Flowspace")!=null) {
			 String s=(String)(v.getProperty("Flowspace"));
			 if (!s.isEmpty())
				try {
					pp.setFlowspace((String)v.getProperty("Flowspace"));
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		 }
		 if (v.getProperty("Flowvisor")!=null) {
			 String s=(String)(v.getProperty("Flowvisor"));
			 if (!s.isEmpty())pp.setFlowvisor((String)v.getProperty("Flowvisor"));
		 }
    	
	}
	public PortNode() {
		// TODO Auto-generated constructor stub
	}
	Vertex getBluePrintVertex(){
		return v;
	}
	public PortProperties portproperties(){
		return pp;
	}
	void setBluePrintVertex(Vertex vv){
		if(pp.getDomain()!=null)
				vv.setProperty("Domain",pp.getDomain());
		if(pp.getDPID()!=null)
			vv.setProperty("DPID",pp.getDPID());
		if(pp.getId()!=null)
			vv.setProperty("ID",pp.getId());
		if(pp.getPort()!=null)
			vv.setProperty("Port",pp.getPort());
		if(pp.getType()!=null)
			vv.setProperty("Type",pp.getType());
		if(pp.getFlowSpace()!=null)
			vv.setProperty("Flowspace",pp.getFlowSpace());
		if(pp.getFlowvisor()!=null)
			vv.setProperty("Flowvisor",pp.getFlowvisor());
		v=vv;
	}
	
	
}

