package org.renci.pharos.gui;

import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import javax.swing.JOptionPane;

import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Graph;
import com.tinkerpop.blueprints.Vertex;
import com.tinkerpop.blueprints.impls.dex.DexGraph;
import com.tinkerpop.blueprints.impls.tg.TinkerGraph;
import com.tinkerpop.blueprints.oupls.jung.GraphJung;
import com.tinkerpop.blueprints.util.io.graphml.GraphMLReader;
import com.tinkerpop.blueprints.util.io.graphml.GraphMLWriter;

import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.visualization.BasicVisualizationServer;

class PortTopologyGraph extends TopologyGraph
{
	 public PortTopologyGraph(TopologyGenerator t) {
		super(t);
	}
	public void openFromFile(File fileName) throws Exception{
		 try{
			 Graph graph=new TinkerGraph();
			 GraphMLReader.inputGraph(graph, new FileInputStream(fileName)); 
			 GraphJung<Graph> gj = new GraphJung<Graph>(graph);
			 Layout<Vertex, Edge> layout = new CircleLayout<Vertex, Edge>(gj);
			 layout.setSize(new Dimension(800, 600));
			 BasicVisualizationServer<Vertex, Edge> viz = new BasicVisualizationServer<Vertex, Edge>(layout);
			 viz.setPreferredSize(new Dimension(800, 600));
			 newTopo();
			 for (Vertex v: gj.getVertices()){
				 Node n=new PortNode(v);
				 
				 n.x1=(int)layout.transform(v).getX()-5;
				 n.y1=(int)layout.transform(v).getY()-5;
				 n.x2=n.x1+10;
				 n.y2=n.y1+10;
				 itemList.add(n);
				 
				 
			 }
			
			 for (Edge e: gj.getEdges()){
				 Line l=new PortLine(e);
				 
				 l.x1=(int)layout.transform(e.getVertex(Direction.OUT)).getX();
				 l.y1=(int)layout.transform(e.getVertex(Direction.OUT)).getY();
				 l.x2=(int)layout.transform(e.getVertex(Direction.IN)).getX();
				 l.y2=(int)layout.transform(e.getVertex(Direction.IN)).getY();
				 itemList.add(l);
			 }
			 
			 for (Drawings d : itemList){
				   if (d.type==ShapeType.PortNode || d.type==ShapeType.NodeNode){
					   attachLines((Node)d);
				   }
			 }
			 repaint();
			 //tg.getContentPane().add ( viz );
		 }
		 catch (Exception ex){
			 throw ex;
		 }
	 }
	 public void saveTofile(File fileName){
		 try {
             fileName.delete();
             String dbfilename = "./data/temp.dex";
     		 File dbfile = new File(dbfilename);
     		 if (dbfile.exists())dbfile.delete();
     		 Graph graph = new DexGraph(dbfilename);
     		 //process nodes first
     		 for (Drawings d : itemList){
     			 switch(d.type){
     			 	case PortNode:
     			 		((PortNode)d).setBluePrintVertex(graph.addVertex(null));
     			 		break;
     			 	case NodeNode:
     			 		((NodeNode)d).setBluePrintVertex(graph.addVertex(null));
     			 		break;
     			 	default:
     			 		break;
     			 }
     		 }
     		 //edges are processed after nodes 
     		for (Drawings d : itemList){
     			switch(d.type){
     			 	case PortLine:
     			 		Node startNode=((DirectedLine)d).getStartNode();
         				Node endNode=((DirectedLine)d).getEndNode();
         				try{
    	     				Edge e=graph.addEdge(null,startNode.getBluePrintVertex(),
    	     						endNode.getBluePrintVertex(),((PortLine)d).getLabel());
    	     				d.setColor(0,0,0);
    	     				((Line)d).setBluePrintEdge(e,false);
         				}
         				catch(NullPointerException ex){
         					d.setColor(255,0,0);
         					repaint();
         					JOptionPane.showMessageDialog(null, "startNode/endNode/label not set");
         			 	 }
         				break;
     			 	case NodeLine:
     			 		Node lNode=((UndirectedLine)d).getNode1();
         				Node rNode=((UndirectedLine)d).getNode2();
         				try{
    	     				Edge e=graph.addEdge(null,lNode.getBluePrintVertex(),
    	     						rNode.getBluePrintVertex(),((NodeLine)d).getLabel());
    	     				d.setColor(0,0,0);
    	     				((Line)d).setBluePrintEdge(e,false);
         				}
         				catch(NullPointerException ex){
         					d.setColor(255,0,0);
         					repaint();
         					JOptionPane.showMessageDialog(null, "startNode/endNode/label not set");
         			 	 }
         				break;
         			default:
         				break;
     			 }
     		 }
     		 
     		 GraphMLWriter writer=new GraphMLWriter(graph);
     		 writer.outputGraph(fileName.getPath());
     		 graph.shutdown();
          } catch (IOException ioe) {
             ioe.printStackTrace();
          }
	 }
	@Override
	void saveRequest(File fileName) {
		// TODO Auto-generated method stub
		
	}
}


