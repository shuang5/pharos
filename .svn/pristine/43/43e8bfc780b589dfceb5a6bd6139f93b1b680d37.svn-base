package org.renci.pharos.gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.QuadCurve2D;
import java.util.Vector;

/**
 * @author shuang
 *
 */
public abstract class UndirectedCurvedDottedLine extends Line{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int controlx, controly;
	
	public UndirectedCurvedDottedLine(){
		controlx=x1;
		controly=y1;
	}
	public void setControlPoint (int x, int y){
		controlx=x;
		controly=y;
	}
	public int getControlX(){
		return controlx;
	}
	public int getControlY(){
		return controly;
	}
	void draw(Graphics2D g2d) {
        g2d.setPaint(Color.gray);
        g2d.setStroke(new BasicStroke(3, BasicStroke.CAP_BUTT, 
        		BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0));
        //Line2D.Double line = new Line2D.Double(x1, y1, x2, y2);
        QuadCurve2D.Double curve = new QuadCurve2D.Double(x1,y1,controlx,controly,x2,y2);
        shape=curve;
        //g2d.setRenderingHint(
        //	    RenderingHints.KEY_ANTIALIASING,
        //	    RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.draw(curve);
    }
	
	private boolean linecontains(int x1, int y1, int x2, int y2, int x, int y){
		double d=Math.abs((x2-x1)*(y1-y)-(x1-x)*(y2-y1))/Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
		if(d<2) {
			if(Math.sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1))<3) xSelected=true;
			else if(Math.sqrt((x-x2)*(x-x2)+(y-y2)*(y-y2))<3) ySelected=true;
			return true;
		}
		else return false;
	}
	class Pair{
		public Pair(int xx1, int yy1, int xx2, int yy2) {
			x1=xx1;
			y1=yy1;
			x2=xx2;
			y2=yy2;
		}
		public int x1;
		public int y1;
		public int x2;
		public int y2;
	}
	private void spliceLine(int x1,int y1,int x2,int y2, Vector<Pair> pairs){
		//is 6 close enough?
		if(Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))<6){
			pairs.add(new Pair(x1,y1,x2,y2));
		}
		else {
			int cx=(x1*3+x2)/4;
			int cy=(y2*3+y1)/4;
			spliceLine(x1,y1,cx,cy,pairs);
			spliceLine(cx,cy,x2,y2,pairs);
		}
	}
	boolean contains(int x,int y){
		xSelected=false;
		ySelected=false;
		if (x<Math.min(x1, x2) || x>Math.max(x1, x2) || y<Math.min(y1, y2) || y>Math.max(y1, y2))
			return false;
		//slice the curve to line segments
		//the formula is controlx=(x1*3+x2)/4, controly=(y2*3+y1)/4
		
		Vector<Pair> pairs=new Vector<Pair>();
		spliceLine(x1,y1,x2,y2,pairs);
		for(Pair p : pairs){
			if (linecontains(p.x1,p.y1,p.x2,p.y2,x,y))return true;
		}
		
		return false;
		//return getShape().getBounds().contains(x,y);
	}
	void remove(){}
}