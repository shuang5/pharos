package org.renci.pharos.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JToolBar;

class ButtonPan {
	private JToolBar buttonPanel;
	private JButton choices[];
	private Icon officons[];
	private Icon onicons[];
	private CHOICES cho;

	public JToolBar getButtonPanel() {
		return buttonPanel;
	}

	public void setIconOn(int c) {

		choices[CHOICES.Select].setIcon(officons[CHOICES.Select]);
		choices[CHOICES.Line].setIcon(officons[CHOICES.Line]);
		choices[CHOICES.Node].setIcon(officons[CHOICES.Node]);
		choices[CHOICES.Resize].setIcon(officons[CHOICES.Resize]);

		if (cho.getCurrentChoice() == c) { // flip
			cho.unsetCurrentChoice(c);
			choices[c].setIcon(officons[c]);
		} else {
			cho.setCurrentChoice(c);
			choices[c].setIcon(onicons[c]);
		}
	}

	public ButtonPan(final TopologyGenerator tgrt, final CHOICES ch) {
		officons = new ImageIcon[CHOICES.getNumberOfChoices()];
		onicons = new ImageIcon[CHOICES.getNumberOfChoices()];
		choices = new JButton[CHOICES.getNumberOfChoices()];
		cho = ch;
		// buttonPanel = new JToolBar(JToolBar.VERTICAL);
		buttonPanel = new JToolBar(JToolBar.HORIZONTAL);

		for (int i = 0; i < choices.length; i++) {

			officons[i] = new ImageIcon("figs/" + CHOICES.getName(i)
					+ "Off.png");
			onicons[i] = new ImageIcon("figs/" + CHOICES.getName(i) + "On.png");
			choices[i] = new JButton("", officons[i]);
			choices[i].setToolTipText(CHOICES.getTip(i));
			choices[i].setBorderPainted(false);
			buttonPanel.add(choices[i]);
		}
		cho.setCurrentChoice(CHOICES.Select);
		choices[CHOICES.Select].setIcon(onicons[CHOICES.Select]);
		choices[0].addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				tgrt.newFile();
			}
		});
		choices[1].addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				tgrt.loadFile();
			}
		});
		choices[2].addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (cho.getState() == State.Provider)
					tgrt.saveFile();
				else
					tgrt.saveRequest();
			}
		});
		choices[3].addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setIconOn(CHOICES.Select);
				if (cho.getState() == State.Request) {
					cho.setState(State.Provider);
					choices[CHOICES.Request].setIcon(officons[CHOICES.Request]);
					choices[CHOICES.Line].setIcon(officons[CHOICES.Line]);
				}
			}
		});
		choices[4].addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setIconOn(CHOICES.Line);
				// createNewItem();
				// repaint();
			}
		});
		choices[5].addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setIconOn(CHOICES.Node);
				if (cho.getState() == State.Request) {
					cho.setState(State.Provider);
					choices[CHOICES.Request].setIcon(officons[CHOICES.Request]);
					choices[CHOICES.Line].setIcon(officons[CHOICES.Line]);
				}
				// createNewItem();
				// repaint();
			}
		});
		choices[6].addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setIconOn(CHOICES.Resize);
				if (cho.getState() == State.Request) {
					cho.setState(State.Provider);
					choices[CHOICES.Request].setIcon(officons[CHOICES.Request]);
				}
			}
		});
		choices[7].addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				tgrt.repaint();
			}
		});
		choices[8].addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (cho.getState() == State.Provider) {
					cho.setState(State.Request);
					choices[8].setIcon(onicons[8]);
					setIconOn(CHOICES.Line);
					cho.setCurrentChoice(CHOICES.Line);
				} else if (cho.getState() == State.Request) {
					cho.setState(State.Provider);
					choices[8].setIcon(officons[8]);
					cho.setCurrentChoice(CHOICES.Line);
				}
			}
		});

	}
}