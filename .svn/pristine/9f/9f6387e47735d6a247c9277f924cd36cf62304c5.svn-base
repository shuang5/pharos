package org.renci.pharos.gui;


import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Edge;

public final class NodeLine extends UndirectedLine{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String label;
	private String linkType;
	private String ID;
	private int port1=-1;
	private int port2=-1;
	public NodeLine(){
	}
	public NodeLine(Edge e) {
		e=Preconditions.checkNotNull(e);
   	 	setShapeType(ShapeType.NodeLine);
	   	retrieveBluePrintEdge(e);
	}
	public void setBluePrintEdge(Edge e, boolean reverse) {
		e=Preconditions.checkNotNull(e);
		e.setProperty("ID", getId());
		//by blueprint's convention
		//if (reverse==false)
		//port1 is equivalent to port out
		//port2 is equivalent to port in
		//else 
		//port1 is port in
		//port2 is port out
		//when we save the graph, we lose leftness and rightness
		if(!reverse){
			e.setProperty("Peers","("+e.getVertex(Direction.OUT).getProperty("ID")+":"+String.valueOf(getPort1())+
				","+e.getVertex(Direction.IN).getProperty("ID")+":"+String.valueOf(getPort2())+")");
		}
		else {
			e.setProperty("Peers","("+e.getVertex(Direction.IN).getProperty("ID")+":"+String.valueOf(getPort1())+
					","+e.getVertex(Direction.OUT).getProperty("ID")+":"+String.valueOf(getPort2())+")");
		}
		if(!virtual){
			e.setProperty("Virtual", "No");
			if(getLinkType()!=null)
				e.setProperty("LinkType",getLinkType());
		}
		else {
			e.setProperty("Virtual", "Yes");
			if(getRules()!=null)
				e.setProperty("Rules",getRules());
		}
			
	}
	
	public void setLabel(String d){
		if(!Strings.isNullOrEmpty(d))
			label=d;
	}
	public void setId(String d){
		if(!Strings.isNullOrEmpty(d))
			ID=d;
	}
	public void setLinkType(String d){
		if(!Strings.isNullOrEmpty(d))linkType=d;
	}
	
	public void setPort1(int d){
		((NodeNode)getNode1()).associateLine2Port(this,d);
		port1=d;
	}
	public void setPort2(int d){
		((NodeNode)getNode2()).associateLine2Port(this,d);
		port2=d;
	}
	public int getPort1(){
		return port1;
	}
	public int getPort2(){
		return port2;
	}
	public String getLabel(){
		return label;
	}
	public String getId(){
		return ID;
	}
	public String getLinkType(){
		return linkType;
	}
	
	@Override
	public boolean configComplete() {
		if(Strings.isNullOrEmpty(this.getId()))return false;
		else if(Strings.isNullOrEmpty(this.getLinkType()))return false;
		else if(getPort1()==-1 || getPort2()==-1) return false;
		return true;
	}
	@Override
	void retrieveBluePrintEdge(Edge e) {
		e=Preconditions.checkNotNull(e);
		setId((String) e.getProperty("ID"));
		String peers=(String)e.getProperty("Peers");
	  	String[] tokens = peers.split("[ (,)]+");
	  	String[] p1=tokens[1].split("[:]");
	  	String[] p2=tokens[2].split("[:]");
	  	if(e.getVertex(Direction.OUT).getProperty("ID").equals(p1[0])){
	  		port1=Integer.parseInt(p1[1]);
	  		port2=Integer.parseInt(p2[1]);
	  	}
	  	else {
	  		port2=Integer.parseInt(p1[1]);
	  		port1=Integer.parseInt(p2[1]);
	  	}
		if(((String)e.getProperty("Virtual")).equals("No"))
			setLinkType((String) e.getProperty("LinkType"));
		else {
			setRules(((String)e.getProperty("Rules")));
		}
		
	}
}

