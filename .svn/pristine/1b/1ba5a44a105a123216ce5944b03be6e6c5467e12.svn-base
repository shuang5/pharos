package org.renci.pharos.gui;

import java.util.ArrayList;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import com.tinkerpop.blueprints.Vertex;

import org.apache.commons.lang.StringUtils;
import org.renci.doe.pharos.flow.FlowSpace;
import org.renci.doe.pharos.flow.PharosException;

public final class NodeNode extends UndirectedNode{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String Domain;
	private String ID;
	private String DPID;
	private String Type;
	private Vertex v;
	private String FV;
	private boolean labelTranslation=false;
	//FlowSpace flowspace=new FlowSpace();
	private ArrayList<NodePortProperties> ports=new ArrayList<NodePortProperties>();
	private ArrayList<Line> lines=new ArrayList<Line>();
	public NodeNode(){
	}
	public NodeNode(Vertex vv) {
    	v=Preconditions.checkNotNull(vv);;
		type=ShapeType.NodeNode;
		if (v.getProperty("ID")!=null) 
			 setId((String)v.getProperty("ID"));
		 if (v.getProperty("Domain")!=null) 
			 setDomain((String)v.getProperty("Domain"));
		 if (v.getProperty("DPID")!=null) 
			 setDPID((String)v.getProperty("DPID"));
		 if (v.getProperty("Ports")!=null) {
			 String s=(String)(v.getProperty("Ports"));
			 if (!s.isEmpty())
				try {
					setPorts(s);
				} catch (Exception e) {
					e.printStackTrace();
				}
		 }
    	
	}
	public void addLink(Line l){
		l=Preconditions.checkNotNull(l);
		if(l.type==ShapeType.NodeLine){
			lines.add(l);
			ports.add(new NodePortProperties());
			super.addLink(l);
		}
		else if(l.type==ShapeType.RequestNodeLine){
			super.addLinkReq(l);
		}		
	}
	public void removeAllLinks(){
		lines.clear();
		ports.clear();
		super.removeAllLinks();
	}
	public void removeLink(Line l){
		l=Preconditions.checkNotNull(l);
		if(lines.contains(l)){
			int i=lines.indexOf(l);
			lines.remove(i);
			ports.remove(i);
		}
		if(l.type==ShapeType.NodeLine){
			super.removeLink(l);
		}
		else if(l.type==ShapeType.RequestNodeLine){
			super.removeLinkReq(l);
		}
	}
	Vertex getBluePrintVertex(){
		return v;
	}
	public void setBluePrintVertex(Vertex vv){
		vv=Preconditions.checkNotNull(vv);
		if(getDomain()!=null)
				vv.setProperty("Domain",getDomain());
		if(getDPID()!=null)
			vv.setProperty("DPID",getDPID());
		if(getId()!=null)
			vv.setProperty("ID",getId());
		if(getType()!=null)
			vv.setProperty("Type",getType());
		if(getPorts()!=null)
			vv.setProperty("Ports",getPorts());
		if(isLabelTranslation())
			vv.setProperty("LabelTranslation","yes");
		else 
			vv.setProperty("LabelTranslation","no");
		v=vv;
	}
	public void setDomain(String d){
		if(d!=null)Domain=d;
	}
	public void setId(String d){
		if(d!=null)ID=d;
	}
	public void setDPID(String d){
		if(d!=null)DPID=d;
	}
	
	public void setType(String d){
		if(d!=null)Type=d;
	}
	public void setPort(NodePortProperties p){
		p=Preconditions.checkNotNull(p);
		int id=Integer.parseInt(p.getId());
		try{
			ports.set(id, p);
			
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	public void setPorts(String p) throws Exception{
		if(StringUtils.isEmpty(p) || StringUtils.isBlank(p))return;
		String delims="[;]";
		String[] tokens=p.split(delims);
		for (String s: tokens){
			if(s==null || s.equals("null"))continue;
			NodePortProperties pp=new NodePortProperties(s);
			try{
				ports.set(Integer.parseInt(pp.getId()),pp);
			}
			catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	public void setFlowvisor(String d){
		if(!Strings.isNullOrEmpty(d))FV=d;
	}
	public String getFlowvisor(){
		return FV;
	}
	public String getDomain(){
		return Domain;
	}
	public String getId(){
		return ID;
	}
	
	public String getType(){
		return Type;
	}
	public String getDPID(){
		return DPID;
	}
	public NodePortProperties getPort(int id){
		return ports.get(id);
	}
	public String getPorts(){
		String s=new String();
		for(NodePortProperties p:ports){
			s+=p;
			s+=';';
		}
		return s;
	}
	public FlowSpace getFlowSpaceUnionOfAllPorts() throws PharosException{
		FlowSpace fs=new FlowSpace();
		for(NodePortProperties p:ports){
			fs.merge(new FlowSpace(p.getFlowSpace()));
		}
		return fs;
	}
	public void associateLine2Port(Line l, int port){
		ports.get(port).setLineAssociation(l);
	}
	public boolean portAssociated2Line(int port, NodeLine edge) {
		if(ports.get(port).getLineAssociation()==edge)return true;
		else
			return false;
	}
	public NodePortProperties portproperties(int portSelected) {
		return ports.get(portSelected);
	}
	public boolean isLabelTranslation() {
		return labelTranslation;
	}
	public void setLabelTranslation(boolean labelTranslation) {
		this.labelTranslation = labelTranslation;
	}
	@Override
	boolean configComplete() {
		if(Strings.isNullOrEmpty(this.getDomain()))return false;
		else if(Strings.isNullOrEmpty(this.getDPID()))return false;
		else if(Strings.isNullOrEmpty(this.getId()))return false;
		else {
			for(NodePortProperties p:ports){
				if(Strings.isNullOrEmpty(p.getFlowSpace()))return false;
			}
		}
		return true;
	}
}
