package org.renci.pharos.lp;

import java.util.HashMap;
import java.util.Iterator;

public interface Filter {
	boolean test(String s);
}
class NthDimIterator implements Filter{
	int dim;
	HashMap<String, Boolean> seenitb4;
	NthDimIterator(int n){
		dim=n;
		seenitb4=new HashMap<String, Boolean>();
	}
	@Override
	public boolean test(String s) {
		String delim="[_]";
		String[] tokens=s.split(delim);
		String ss=tokens[dim];
		if(seenitb4.containsKey(ss))return true;
		else{
			seenitb4.put(ss, true);
			return false;
		}
	}
	
}
class FilterIterator implements Iterator<String>{
	Iterator<String > itr;
	Filter filter;
	String next=null;
	FilterIterator(Iterator<String> it, Filter f){
		itr=it;
		filter=f;
	}

	@Override
	public boolean hasNext() {
		while(itr.hasNext()){
			String t=itr.next();
			if(filter.test(t)){
				next=t;
				return true;
			}
		}
		return false;
	}

	@Override
	public String next() {
		return next;
	}

	@Override
	public void remove() {
		throw new IllegalStateException("dont remove!");
		
	}
}
