package org.renci.pharos.lp;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;


import net.sf.javailp.Linear;
import net.sf.javailp.OptType;
import net.sf.javailp.Problem;
import net.sf.javailp.Result;
import net.sf.javailp.Solver;

import com.sun.tools.javac.util.Pair;
import com.tinkerpop.blueprints.Graph;
import com.tinkerpop.blueprints.impls.tg.TinkerGraph;
import com.tinkerpop.blueprints.util.io.graphml.GraphMLReader;

public class LpProblem implements PProblem {
	private final static Logger logger = Logger.getLogger(LpSolverTest.class.getName());
	private Problem problem=new Problem();
	private NodeAdjacencyMatrix demandMatrix;
	private Variables variables;
	private Graph pgraph;
	private Graph rgraph;
		
	public LpProblem () throws FileNotFoundException, IOException{		
		//read graphml file to TinkerGraph
		String pFile=FileGUI.getFile("Open Provider Topology");
		if(pFile!=null){
			pgraph=new TinkerGraph();
			GraphMLReader.inputGraph(pgraph, new FileInputStream(pFile));
			logger.log(Level.INFO, "Provider topology read");
		}
		String rFile=FileGUI.getFile("Open Request Topology");
		if(rFile!=null){
			rgraph=new TinkerGraph();
			GraphMLReader.inputGraph(rgraph, new FileInputStream(rFile));
			logger.log(Level.INFO, "Request topology read");
		}
		init();
	}
	public LpProblem(Graph p,Graph r){
		pgraph=p;
		rgraph=r;
		init();
	}
	public Iterator<Entry<Pair<String, String>, EdgeDisc>> getIterator(){
		return demandMatrix.getIterator();
	}
	public void setObjective(Linear l, OBJ obj){
		if (obj==OBJ.MIN){
			problem.setObjective(l, OptType.MIN);
			//logger.log(Level.FINE, "Min: "+l);
		}
		else if (obj==OBJ.MAX){
			problem.setObjective(l, OptType.MAX);
			//logger.log(Level.FINE,"Max: "+l);
		}
		
	}
	public Result solve(Solver solver) {
		return solver.solve(problem);
	}
	public Problem problem() {
		return problem;
	}
	
	public Matrix demandMatrix() {
		return demandMatrix;
	}
	public Variables variables() {
		return variables;
	}
	public Graph getRequestTopo() {
		return rgraph;
	}
	public Graph getProviderTopo() {
		return pgraph;
	}
	@Override
	public void init() {
		demandMatrix=new NodeAdjacencyMatrix(rgraph);
		variables=new FlowAssignmentVariables8D(pgraph,rgraph);		
	}
	@Override
	public int numberOfVariables() {
		return variables.size();
	}
	@Override
	public void saveProblem(File file) throws IOException {
		if (!file.exists()) {
			file.createNewFile();
		}
	    Thread writeThread = new Thread() {
	      public void run() {
	    	  FileWriter fw;
			  try {
				fw = new FileWriter(file.getAbsoluteFile());
				BufferedWriter bw = new BufferedWriter(fw);
	    		bw.write(problem.toString());
	    		bw.close();
			  } catch (IOException e) {
				e.printStackTrace();
			  }
	    		
	      }
	    };
		writeThread.start();
		
	}
}
