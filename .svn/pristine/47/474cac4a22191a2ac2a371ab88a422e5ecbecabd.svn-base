package org.renci.pharos.lp;

import static com.google.common.base.Preconditions.checkNotNull;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.renci.pharos.flow.FlowSpace;
import org.renci.pharos.flow.Labels;
import org.renci.pharos.flow.PharosException;
import org.renci.pharos.gui.NodePortProperties;

import net.sf.javailp.Linear;
import net.sf.javailp.Solver;
import net.sf.javailp.SolverFactory;
import net.sf.javailp.SolverFactoryLpSolve;

import com.sun.tools.javac.util.Pair;
import com.tinkerpop.blueprints.Compare;
import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Graph;
import com.tinkerpop.blueprints.Vertex;
import com.tinkerpop.blueprints.impls.tg.TinkerGraph;

public class MCFlowProblem extends ProblemDecorator{
	private final static Logger logger = Logger.getLogger(MCFlowProblem.class.getName());
	private HashSet<Pair<String,String>> sdpairs;
	
	public MCFlowProblem(SSSDFlowProblem p) {
		checkNotNull(p);
		pproblem=p;
		FlowAssignmentVariables8D fav=(FlowAssignmentVariables8D)variables();
		sdpairs=new HashSet<Pair<String, String>>(fav.getConstants().keySet());
	}
	public void addIntegerConstraints(){
		logger.log(Level.INFO,"adding Integer constraints:");
		for(String s: variables().getAllVariables()){
			pproblem.problem().setVarType(s,Boolean.class);
		}
	}
	public void addNonIntegerConstraints(){
		logger.log(Level.INFO,"adding Integer constraints:");
		for(String s: variables().getAllVariables()){
			pproblem.problem().setVarType(s,Double.class);
		}
	}
	public void addRequestConstraints(){
		logger.log(Level.INFO,"adding request constraints:");
		for(Pair<String,String> sd: sdpairs){
			((SSSDFlowProblem)pproblem).setSource(sd.fst);
			((SSSDFlowProblem)pproblem).setDestination(sd.snd);
			((SSSDFlowProblem)pproblem).addRequestConstraints();
		}
	}
	public void addLabelConstraints(){
		logger.log(Level.INFO,"adding label assignment constraints:");
		for(Pair<String,String> sd: sdpairs){
			((SSSDFlowProblem)pproblem).setSource(sd.fst);
			((SSSDFlowProblem)pproblem).setDestination(sd.snd);
			((SSSDFlowProblem)pproblem).addLabelConstraints();
		}
	}
	public void addFlowConservationConstraints(){
		logger.log(Level.INFO,"adding flow constraints:");
		for(Pair<String,String> sd: sdpairs){
			((SSSDFlowProblem)pproblem).setSource(sd.fst);
			((SSSDFlowProblem)pproblem).setDestination(sd.snd);
			((SSSDFlowProblem)pproblem).addFlowConservationConstraints();
		}
	}
	public void addCapacityConstraints(){
		logger.log(Level.INFO,"adding capacity constraints:");
		FlowAssignmentVariables8D fav=(FlowAssignmentVariables8D)variables();
		String[] s=new String[]{"+","+","+","+","*","*","*","*"};
		ArrayList<Linear> arr=fav.generateLinears(s, fav.getSum());
		for(Linear l:arr){
			if(l.size()>0)problem().add(l, "<=", 1);
			logger.log(Level.FINE,l+" <= "+ 1);
		}
	}
	public Variables variables() {
		return pproblem.variables();
	}
	public ArrayList<String> getProviderVariables(){
		return ((FlowAssignmentVariables8D)variables()).getProviderVariables();
	}
	public ArrayList<String> getRequestVariables(){
		return ((FlowAssignmentVariables8D)variables()).getRequestVariables();
	}
	SolverFactory factory = new SolverFactoryLpSolve(); // use lp_solve
	//SolverFactory factory = new SolverFactoryGurobi(); // use gurobi
	{
		factory.setParameter(Solver.VERBOSE, 0); 
		factory.setParameter(Solver.TIMEOUT, 10000); // set timeout to 10000 seconds
		
	}
	public OptimizationResult compute(ComputeMode mode, Graph p){
		switch(mode){
		case ILP:
			return ilp();
		case LongestFirst:
			return heuristic(p);
		case LPRelaxation:
			return lprelax();
		default:
			break;
		}
		return null;
	}
	private OptimizationResult ilp(){
		this.addIntegerConstraints();
		this.addLabelConstraints();
		this.addCapacityConstraints();
		this.addRequestConstraints();
		this.addFlowConservationConstraints();
		//objective
		logger.log(Level.INFO,"setting objective function");
		Linear linear = new Linear();
		final ArrayList<String> arr=getProviderVariables();
		for(String s: arr){
		  linear.add(1,s);
		}
		logger.log(Level.INFO, "number of variables is: "+
				(arr.size()+getRequestVariables().size())); 
		this.setObjective(linear, OBJ.MIN);
		
		Solver solver = factory.get(); // you should use this solver only once for one problem
		logger.log(Level.INFO,"Solving...");
		final OptimizationResult or=new OptimizationResult();
		or.result = solve(solver);
		if(or.result!=null){
			logger.log(Level.INFO,"Objective: "+String.valueOf(or.result.getObjective()));
			or.objective=String.valueOf(or.result.getObjective());
			for(String s:arr){
				if(or.result.getPrimalValue(s).intValue()>0) 
					  or.nzValues.add(s+"="+(or.result.getPrimalValue(s)).toString());
			}
		}
		else logger.log(Level.INFO,"no feasible soltuion found!");
		
		return or;
	}
	private OptimizationResult lprelax(){
		this.addNonIntegerConstraints();
		this.addLabelConstraints();
		this.addCapacityConstraints();
		this.addRequestConstraints();
		this.addFlowConservationConstraints();
		//objective
		logger.log(Level.INFO,"setting objective function");
		Linear linear = new Linear();
		ArrayList<String> arr=getProviderVariables();
		for(String s: arr){
		  linear.add(1,s);
		}
		logger.log(Level.INFO, "number of variables is: "+
				(arr.size()+getRequestVariables().size())); 
		this.setObjective(linear, OBJ.MIN);
		
		Solver solver = factory.get(); // you should use this solver only once for one problem
		logger.log(Level.INFO,"Solving...");
		final OptimizationResult or=new OptimizationResult();
		or.result = solve(solver);
		if(or.result!=null){
			logger.log(Level.INFO,"Objective: "+String.valueOf(or.result.getObjective()));
			or.objective=String.valueOf(or.result.getObjective());
			for(String s:arr){
				if(or.result.getPrimalValue(s).intValue()>0) 
					  or.nzValues.add(s+"="+(or.result.getPrimalValue(s)).toString());
			}
			return or;
		}
		else {
			logger.log(Level.INFO,"no feasible soltuion found!");
			return null;
		}
	}
	private Graph constructAuxGraph(Graph p){
		Graph g=new TinkerGraph();
		for (Vertex vv: p.getVertices()){
			Vertex vin=GraphHelper.getVertex(p, GraphHelper.getVertexID(vv));
			for(Edge e:vv.getEdges(Direction.IN)){
	  	    //get labels from graph
	  	    String peers=(String)e.getProperty("Peers");
	  	    String[] tokens = peers.split("[ (,)]+");
	  	    String[] port1=tokens[1].split("[:]");
	  	    String[] port2=tokens[2].split("[:]");
	  	    	
	  	    Vertex vout=GraphHelper.getVertex(p, GraphHelper.getVertexID(e.getVertex(Direction.OUT)));
	  	    final boolean vinLabelTranslation=((String)vin.getProperty("LabelTranslation")).equals("yes");
	  	    final boolean voutLabelTranslation=((String)vout.getProperty("LabelTranslation")).equals("yes");
	  	    int in,out;
	  	    if(Integer.parseInt((String)vin.getId())==Integer.parseInt((String)port1[0])){
	  	    	in=Integer.parseInt(port1[1]);
	  	    	out=Integer.parseInt(port2[1]);
	  	    }
	  	    else{
	  	    	in=Integer.parseInt(port2[1]);
	  	    	out=Integer.parseInt(port1[1]);
	  	    }
	  	    NodePortProperties npin=new NodePortProperties((String)vin.getProperty("Ports"),in);
	  	    NodePortProperties npout=new NodePortProperties((String)vout.getProperty("Ports"),out);
	  	    try {
				Labels lin=new Labels(new FlowSpace(npin.getFlowSpace()));
				Labels lout=new Labels(new FlowSpace(npout.getFlowSpace()));
				Iterator<Integer> itin=lin.getIterator();
				Iterator<Integer> itout=lout.getIterator();
				final String s=(String)e.getProperty("Virtual");
				if(s.equals("Yes")){
					while (itout.hasNext()){
						Label l=new Label(itout.next());
						Vertex vo=null;
						if(!voutLabelTranslation){
							vo=GraphHelper.addVertex(g, vout.getProperty("ID")+"_"+l.toString(),
									(String) vv.getProperty("ID")+"out");
						}
						while(itin.hasNext()){
							Label ll=new Label(itin.next());
							Vertex vi=null;
							if(!vinLabelTranslation){
								vi=GraphHelper.addVertex(g, vin.getProperty("ID")+"_"+ll.toString(),
										(String) vin.getProperty("ID")+"in");
							}
							if(vo!=null && vi!=null){
								//if both ends can NOT do label translation, create a new edge with two new vertices
								Edge edge=GraphHelper.addEdge(g, vo, vi);
								edge.setProperty("Cost",2);
							}
							else if(vo!=null){
								//vi can do label translation
								vi=GraphHelper.addVertex(g, (String) vin.getProperty("ID"), (String) vin.getProperty("ID")+"in");
								Edge edge=GraphHelper.addEdge(g,vo, vi);
								edge.setProperty("Cost",2);
							}
							else if(vi!=null){
								//vo can do label translation
								vo=GraphHelper.addVertex(g, (String) vout.getProperty("ID"), (String) vout.getProperty("ID")+"out");
								Edge edge=GraphHelper.addEdge(g, vo, vi);
								edge.setProperty("Cost",2);
							}
							else {
								//if both ends can do label translation, create an intermediate node
								Vertex v=g.addVertex(null);
								v.setProperty("ID",vout.getProperty("ID")+"_"+vin.getProperty("ID"));
								vi=GraphHelper.addVertex(g, (String) vin.getProperty("ID"), (String) vin.getProperty("ID")+"in");
								vo=GraphHelper.addVertex(g, (String) vout.getProperty("ID"), (String) vout.getProperty("ID")+"out");
								
								Edge edge1=GraphHelper.addEdge(g,vo, v);
								edge1.setProperty("Cost",1);

								Edge edge2=GraphHelper.addEdge(g,v, vi);
								edge2.setProperty("Cost", 1);
							}
						}
					}
				}
				else {
					while (itin.hasNext() && itout.hasNext()){
						Label l=new Label(itout.next());
						Vertex vo=null;
						if(!voutLabelTranslation){
							vo=GraphHelper.addVertex(g,vout.getProperty("ID")+"_"+l.toString(),
									(String) vout.getProperty("ID"));
						}
						Label ll=new Label(itin.next());
						Vertex vi=null;
						if(!vinLabelTranslation){
							vi=GraphHelper.addVertex(g, vin.getProperty("ID")+"_"+ll.toString(),
									(String) vin.getProperty("ID"));
						}
						if(vo!=null && vi!=null){
							//if both ends can NOT do label translation, create a new edge with two new vertices
							Edge edge=GraphHelper.addEdge(g, vo, vi);
							edge.setProperty("Cost",2);
						}
						else if(vo!=null){
							//vi can do label translation
							vi=GraphHelper.addVertex(g, (String) vin.getProperty("ID"), (String) vin.getProperty("ID"));
							Edge edge=GraphHelper.addEdge(g,vo, vi);
							edge.setProperty("Cost",2);
						}
						else if(vi!=null){
							//vo can do label translation
							vo=GraphHelper.addVertex(g, (String) vout.getProperty("ID"), (String) vout.getProperty("ID"));
							Edge edge=GraphHelper.addEdge(g, vo, vi);
							edge.setProperty("Cost",2);
						}
						else {
							//if both ends can do label translation, create an intermediate node
							Vertex v=g.addVertex(null);
							v.setProperty("ID",vout.getProperty("ID")+"_"+vin.getProperty("ID"));
							vi=GraphHelper.addVertex(g, (String) vin.getProperty("ID"), (String) vin.getProperty("ID"));
							vo=GraphHelper.addVertex(g, (String) vout.getProperty("ID"), (String) vout.getProperty("ID"));
							
							Edge edge1=GraphHelper.addEdge(g,vo, v);
							edge1.setProperty("Cost",1);

							Edge edge2=GraphHelper.addEdge(g,v, vi);
							edge2.setProperty("Cost", 1);
						}
					}
				}
			
				
			} catch (PharosException e1) {
				e1.printStackTrace();
			}
			}
		}
		return g;
	}
	private Graph addSD(Graph p, String s, String d){
		Graph g=GraphHelper.makeCopy(p);
		if(GraphHelper.getVertex(g, s)==null){
			Vertex vout=GraphHelper.addVertex(g, s, s+"_");
			Iterator<Vertex> v1_itr=g.query().has("Original",Compare.EQUAL,s).vertices().iterator();
			while (v1_itr.hasNext()){
				Edge e=GraphHelper.addEdge(g, vout, v1_itr.next());
				e.setProperty("Cost", 1);
			}
		}
		if(GraphHelper.getVertex(g, d)==null){
			Vertex vin=GraphHelper.addVertex(g, d, d+"_");
			Iterator<Vertex> v1_itr=g.query().has("Original",Compare.EQUAL,d).vertices().iterator();
			while (v1_itr.hasNext()){
				Edge e=GraphHelper.addEdge(g, v1_itr.next(),vin);
				e.setProperty("Cost", 1);
			}
		}
		return g;
	}
	private OptimizationResult heuristic(Graph p){
		final Dijkstra dijkstra=new Dijkstra(p);
		List<Pair<String,String>> list=new ArrayList<Pair<String,String>>(sdpairs);
		Collections.sort(list,new Comparator<Pair<String,String>>(){
			@Override
			public int compare(Pair<String,String> sd1, Pair<String,String> sd2){
				if(dijkstra.getShortestPath(sd1.fst, sd1.snd).size()>
					dijkstra.getShortestPath(sd2.fst, sd2.snd).size())
					return 1;
				else if(dijkstra.getShortestPath(sd1.fst, sd1.snd).size()<
					dijkstra.getShortestPath(sd2.fst, sd2.snd).size())
					return -1;
				else 
					return 0;
		}
		});

		Graph gr=constructAuxGraph(p);
		for(Pair<String,String> pair:list){
			Graph g=addSD(gr,pair.fst,pair.snd);
			Dijkstra dij=new Dijkstra(g);
			dij.getShortestPath(pair.fst, pair.snd);
		}
		return null;
	}
}
